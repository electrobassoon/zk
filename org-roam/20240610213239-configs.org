:PROPERTIES:
:ID:       1fd1b391-bb3b-46e1-8ddd-cd3f4d90eb99
:END:
#+title: Configs

Here are various things in my emacs init files, mostly so I don't lose them at some point.

** Prettifying Org-mode
These are some adjustments to make org-mode files look nicer.
#+begin_src  elisp :export code
(setq org-hide-emphasis-markers t)
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(add-hook 'org-mode-hook 'visual-line-mode)
(add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src
** Rainbow Delimiters
Just makes dealing with parenthesis and things a little nicer.
#+begin_src elisp :export code
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Lilypond config
This is so that lilypond and lyi files will automatically get the correct major mode.
#+begin_src elisp :export code
(autoload 'LilyPond-mode "lilypond-mode")
(setq auto-mode-alist
      (cons '("\\.ly$" . LilyPond-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.lyi$" . LilyPond-mode) auto-mode-alist))
	     
(add-hook 'LilyPond-mode-hook (lambda () (turn-on-font-lock)))
#+end_src
** Org-roam adjustments
Here are my capture templates. Just two, one for normal notes and one for a bibliography note that connects with bibtex for the citation key.
#+begin_src elisp :export code
 (setq org-roam-capture-templates
   '(("d" "default" plain "%?" :if-new
      (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
      :unnarrowed t)
     ("r" "bibliography reference" plain "%?" :if-new
      (file+head "${citekey}.org" "#+title: ${citekey}")
      :unnarrowed t)))
#+end_src
Also, I make the org-roam-buffer into a side window so that it doesn't get overwritten with constant jumping around buffers.
#+begin_src elisp :export code
(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-side-window)
               (side . right)
               (slot . 0)
               (window-width . 0.33)
               (window-parameters . ((no-delete-other-windows . t)))))
#+end_src
** Publishing Org-Roam Database

I use the org-publish function to publish my zk. There are two projects, roam and lilypond images. Lilypond images uses org-publish-attachment to just copy any pngs (which at the moment should only be coming from lilypond src blocks) to the publishing directory. The roam project uses the roam-publication-wrapper function to get everything. The org-roam-custom-link-builder tries to make backlinks work, and gets called when the org-roam-graph-link-builder gets called.

#+begin_src elisp :export code
(defun roam-sitemap (title list)
  (concat "#+OPTIONS: ^:nil author:nil html-postamble:nil\n"
          "#+TITLE: " title "\n\n"
          (org-list-to-org list) "\nfile:sitemap.svg"))

(setq my-publish-time 0)   ; see the next section for context
(defun roam-publication-wrapper (plist filename pubdir)
;;  (org-roam-graph)  
(org-html-publish-to-html plist filename pubdir)
  (setq my-publish-time (cadr (current-time))))

(setq org-publish-project-alist
      '(("roam"
	 :base-directory "~/zk/org-roam"
	 :auto-sitemap t
	 :sitemap-function roam-sitemap
	 :sitemap-title "My ZK"
	 :publishing-function roam-publication-wrapper
	 :publishing-directory "~/zk/docs/site"
	 :section-numbers nil
	 :with-todo-keywords nil
	 :healine-levels 5
	 :exclude "exclude/*"
	 :html-head "<link rel=\"stylesheet\" href=\"../style.css\" type=\"text/css\">"
	 :html-postamble "<p><a href=\"sitemap.html\">Site Map</a></p>"
	 )
	("lilypond images"
	 :base-directory "~/zk/org-roam"
	 :base-extension "png"
	 :publishing-directory "~/zk/docs/site"
	 :publishing-function org-publish-attachment
	 )
	))

(setq org-id-extra-files (directory-files-recursively "~/zk/org-roam" "org"))

(defun org-roam-custom-link-builder (node)
  (let ((file (org-roam-node-file node)))
    (concat (file-name-base file) ".html")))

(setq org-roam-graph-link-builder 'org-roam-custom-link-builder)

(add-hook 'org-roam-graph-generation-hook
          (lambda (dot svg) (if (< (- (cadr (current-time)) my-publish-time) 5)
                                (progn (copy-file svg "~/zk/docs/site/sitemap.svg" 't)
                                       (kill-buffer (file-name-nondirectory svg))
                                       (setq my-publish-time 0)))))
#+end_src
** Freezing Stuff?
I can't remember exactly what this is, but apparently emacs was hanging on me occasionally and this is the fix I have.
#+begin_src elisp :export code
(setq history-length 100)
(put 'minibuffer-history 'history-length 50)
(put 'kill-ring 'history-length 25)
(setq auto-window-vscroll nil)
#+end_src
