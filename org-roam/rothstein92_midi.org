:PROPERTIES:
:ID:       baeac79c-4521-4f63-b8c4-c209747e4532
:ROAM_REFS: cite:rothstein92_midi
:END:
#+TITLE: rothstein92_midi

* Midi: a comprehensive introduction
:PROPERTIES:
:Custom_ID: rothstein92_midi
:URL: 
:AUTHOR: Rothstein, J.
:NOTER_DOCUMENT: 
:NOTER_PAGE:
:END:

** page 1 What is MIDI
MIDI is an acronym for "Musical Instrument Digital Interface." Despite its impact on the world of music, MIDI is not a musical language, nor does it directly describe musical sounds. Rather, it is a data communications protocol, an agreement among manufacturers of music equipment, computers, and software that describes a means for music systems and related equipment to exchange information and control signals.
** page 7 Messages
Each message describes a particular event - the start of a musical note, the change in a switch setting, the motion of a foot pedal, or the selection of a sound 'patch', for example.
** page 8 Note on message for musicians
Musicians generally think of music as a series of notes, each one having a particular pitch, amplitude, and timbre. For musicians, then, a note can be considered the most basic of musical messages. Likewise, the most basic MIDI message is the Note On message, though a Note On message differs from our usual understanding of a musical note. Both contain pitch and loudness data, but elements of expresiveness such as vibrato and pitch bend are treated as separate MIDI messages rather than as part and parcel of each note that they affect.
** page 11 Limitations of MIDI
MIDI is not without its shortcomings, however. One is that the MIDI specification does not describe what MIDI devices must do, only how to communicate something if the manufacturer decides to do it. Few MIDI devices will incorporate all the potential power of MIDI, so it is up to the person who buys and uses a MIDI device to find out what ic can and cannot do. Capabilities range from simple one-voice Note On/Note Off generators to complicated systems with touch sensivity, keyboard splits, and modulation control.
Nor does NUDU specify particular sounds that an instrument must make or the quality of the sounds that it does make. The range and quality of sounds from MIDI synthesizers vary from numerous and wonderful to few and awful, and MIDI itself will not help you determine which synthesizer has which. (ends page 12)
** page 139 Understanding MIDI messages
MIDI messages are the means by which one MIDI device communicates information to another MIDI device. Each message specifies a musical event - in order to understand why a particular device acts in a particular manner, you must understand what messages it is receiving and transmitting. Most sequenceres, and some other devices, can display MIDI messages (oftern in a variety of formats), allowing sequencer users to examine and alter MIDI messages one by one.
MIDI messages consist of one or more bytes of digital data.
Each MIDI message byte begins with a start bit (logical 0), followed by eight message bits sent with the least significant bit first, and terminated by a stop bit (logical 1), for a total of ten bits per serial byte. Each eight-bit message byte specifies either a status or data value; the first byte of each message is the status byte, which specifies the type of message and how many additional data bytes follow to make up the complete message. Status bytes always have a most sifnificant bit of 1, while data bytes always have a most significant bit of 0. Data bytes thus always range from a minimum value of 0 to a maximum value of 127 (decimal).
** page 140 Categories of MIDI messages
MIDI messages may be grouped into two major categories, channel messages and system messages. Channel messages specify a particular MIDI channel within the message and generally control such aspects of performance as Note On/Note Off, Continuous Controller, and Program Change. 
Channel messages may themselves be grouped into channel mode messages and channel voice messages, while system messages may be grouped into system real time and system common messages and the single System Exclusive messages
*Channel Mode Messages*
Channel mode messages affect the device that receives them only when they are sent over the channel to which the receiving device is assigned. That assignment of basic channel cannot be set or changed by any MIDI mode or voice message but may be set in one of three ways: permanently by the device's manufacturer; from the front-panel controls of the device, or by transmitting an appropriate System Exclusive message to the device.
Channel mode messages are used primarily to select one of the four MIDI modes described in the previous chapter. Each channel mode message is three bytes long. The four most significant bits of the channel mode status byte are 1011, while the four least significant bits designate one of MIDI's sixteen channels, from 0000 for channel 1 to 1111 for channel 16. (ends page 141)
** page 142 Channel Voice messages
Channel voice messages specify the nature of sounds produced by the synthesizer that receives the messages, using the channel number embedded in the status byte of the message. The events described by channel voice messages include Note On, Note Off, Channel Pressure, Polyphonic Key Pressure, Program Change, Control Change, and Pitch Bend.
*Note On*
A Note On message signals the device receiving it to begin playing a note. Note On messages are generated by a MIDI keyboard when a key is pressed or when some other MIDI device is similarly triggered. (ends 143)
** page 143 Note On/Note Off
Like all MIDI messages, the first byte of the Note On message is its status byte. The four most significant bits of the status byte, 1001, identify the message as a Note On and specify that two additional bytes of MIDI data will follow. The four least significant bits of the Note On status byte indicate which channel the message is intended for - from 0000 for channel 1 to 1111 for channel 16.
The second byte of the Note On message identifies which note is called for. Since it is a data byte, its most sifnifcant bit is 0. The MIDI specification designates 128 different ntoes, numbered from 0 to 127, indicated by the remaining seven bits of the second Note On byte. A MIDI note number does not designate a particular pitch; rather, the note generated depends on the note mapping and tuning determined by the synthesizer or sampler producing the note, though synthesizers most commonly assign MIDI note 60 to middle C and interpret each higher value as an additional half-step above middle C. Under this typical synthesizer's interpretation of Note On messages, MIDI note 66 would represent the F-sharp above middle C, MIDI note 54 would represent the F-sharp below middle C, and so forth.
The third byte of the Note On message indicates the velocity (usually interpreted as loudness), from 0 to 127, in the same manner as the second Note On byte specifies note number. Just as the note number does not specify a particular pitch, the velocity value does not specify a particular loudness, which is instead determined by the velocity map of the synthesizer or sampler.
*Note Off*
Each Note Off message signals the end of a note by signaling the device receiving it to turn off one of the notes it is playing. Like Note On, it is a three-byte message - status byte, note data byte, and velocity data byte. The only difference between the two is that the four most signicant bits of a Note Off status byte are 1000, while a Note On has 1001 in the corresponding positions.
A higher velocity value usually is implemented as a note whose release occurs more quickly - a velocity value of 127 specifies the fastest possible release. Release data generally controls how a note dies away; a low velocity value would thus cause the note to die away slowly and a high velocity value would cause it to die away quickly. Not all MIDI devices implement Note On velocity; fewer still implement Note Off velocity. In such cases, the device transmits a velocity value of 64 for each Note On or Note Off message it transmits or ignores any note off velocity values it receives.
** page 144 Channel Pressure, Polyphonic Key Pressure
Channel Pressure messages are sent by those devices that can sense overall pressure on their keys but are not able to distinguish the pressure put on each indivdual key. That is, whichever key is pressed hardest determines the channel pressure value for the entire keyboard. In the same fashion, certain wind controllers transmit channel pressure information based on increasing breath pressure after the initial attck of a note. Depending upon the device, it may transmit one or, more commonly, a stream of Channel Pressure messages during the duration of a held note.
How a device receiving a Channel Pressure message responds depends on teh particular device. Some devices use channel pressure for aftertouch volume; that is, pressing a key harder once the note has begun sounding causes the note to become louder. Other devices use channel pressure to control vibrato - harder pressure results in a faster or wider vibrato. Still other devices use channel pressure to control other parameters or allow you to assign the parameter yourself.
A Channel prsesure message contains two bytes....(rest not relevant and similar to previous bytes)
*Polyphonic Key Pressure*
Polyphonic key pressure acts in a manner similar to channel pressure, except that the Polyphonic Key Pressure message contains an additional data byte specifying a particular note and affects only that note rather than every note of the specified channel. In order for Polyphonic Key Pressure messages to have any effect, the device transmitting messages must be capable of detecting the different pressures put on each of its keys, and the device receiving messages must bea ble to act upon incoming Polyphonic Pressure messages. (more info on bytes)
** page 145 Program Change
The terms /program, patch,/ and /voice/ are used to refer to a particular setting of a synthesizer's controls when the setting produces a specific instrumental timbre or other musical sound. The terms may also refer to the settings on some other MIDI device such as a digital reverberator that, for example, produce a particular reverberation patern. ("Program," used in this context, should not be confused wiht a computer program, sa set of instructions that directs a computer to perform a particular task.)
A Program Change message does not specify the synthesizer settings themselves; rather, the settings are associated with a patch number by the synthesizer, and the Program Change message simply calls up whatever settings the synthesizer associates with that number. Since the settings that produce a sound vary widely from one synthesizer to another, it is much simpler for MIDI just to specify a program number and leave the particulars of what that program number represents to the synthesizer.
A Program Change message has only a status byte and a single data byte. The status byte of a Program Change message has 1100 as its four most significant bits; like all channel messages, the four least significant bits of the status byte specify the channel.
The data byte of the Program Change message selects a patch on the device receiving the message, from patch 0 to 127. Upon receipt of a Program Change message, the device receiving the message calls up the patch corresponding to the patch value in the message.
But because patch numbers are likely to produce very different results on different synthesizers, selecting the same patch number on two different synthesizers offers no assurance that the resulting two sounds will be similar. In other words, patch number 47 might be associated with a flute sound on one synthesizer and a trombone sound on a differnt synthesizer. Genreal MIDI, described in chapter 4, provides a minimum level of patch compatibility anong synthesizers that implement the General MIDI specification. Even then, patches beyond the 128 specified by General MIDI are likely to differ from one synthesizer to another.
Some synthesizers store fewer than the 128 patches the Program Change message can select. If a synthesizer receives a value higher than the number of stored patches, it may ignore the message, select a default patch, or "wrap" the high value around the number of patches to find a value that is the remainder. (ends 146)
** page 146 Program Change / Control Change
Other synthesiers and MIDI devices can store many more than 128 patches. In such a case, the user can assign 128 of the device's patches to MIDI's 128 patch numbers at any given time; only those 128 patches (sometimes referred to as the MIDI program table) are accesible using Program Change messages.
Even some synthesizers that cannot store more than 128 patches have a user-defined MIDI Program table. In that way, the user can associate patches on a synthesizer receiving Program Change messages with the same program change numbers used by a transmitting synthesizer or sequencer for similar sounds, but which the receiving synthesizer had previously associated with a different patch number.
*Control Change*
A control Chnage message affects a sound that has already been initiated by a Note On message, altering such parameters as volume or modulation of the note in progress. The message can specify any of 121 specific MIDI controllers - though most transmitting devices generally implement only a few. These include continuous controllers, On/Off switch controllers, data controllers, and undefined controllers.
Continuous controllers can transmit control data over a range of values - normally 0 to 127 (or 0 to 16,383 in the case of high-resolution controllers, discussed below). On/Off switch controllers transmit only one of two possible values - 0 to represent off or 127 to represent on. Data controllers transmit specific data values directly or increment or decrement the value previously sent. Finally, undefined controllers may operate in the same fashion as continuous controllers, switches, or data controllers, but they use controller numbers that have not been assigned within the MIDI specification.
Control Channel messages consist of three bytes ... more on bytes
The second byte specifies a controller number, from 0 through 120 (decimal).
The third byte specifies the setting value for the particular controller specified by the previous byte. Setting values range from 0 to 127, but as we will see, Control Change messages for a particular continuous controller can be linked together to yield an effective range of 0 to 16,383.
** page 147
Controller numbers 0 through 31, as specified by the second byte of a Control Change message, are for continuous controllers - those that generate data over a range of values, such as pedals, levers, wheels, and so forth. Some continous controllers, called bidirectional continuous controllers, are ata  centered position while at rest. Using such a controller involves moving it above or below its centered position. Upon release, a bidirecitonal continuous controller returns once again to its at-rest, centered position.
If more than 128 steps of resolution is needed, controller numbers 32 through 63 can be used to represent the least signicant byte of a two byte value whose most significant byte is represented by the corresponding controller number 0 to 31.
Once the most significant byte and corresponding least significant byte of a single Control Change pair have been sent, subsequent fine adjustments to the controller can be made by sending only the three-byte Control Change message for the least significant byte - the message for the most significant byte does not have to be transmitted again.
By agreement between the MIDI Manufacturers Association and the Japan MIDI Standards Committee, certain controller numbers are desgnated for certain standard musical applications. Some of the most important of these include: controller number 1, modulation wheel or lever; controller number 2, breath controller; controller number 4, foot controller; controller number 7, main volume; controller number 65, portamento; controller number 66, sostenuto; and controller number 67, soft pedal. (ends page 148)
** page 159 A Final Warning
Even if you know and understand all the messages that pass back and forth between MIDI devices, it is easy to overlook this basic principle of MIDI message transmission: Few MIDI devices implement every variety of MIDI message. The MIDI specification does not require that MIDI devices implement any but a very few core features. Unless a device implements a partiuclar feature, it will not respond to incoming messages that call upon that featur. Even if the device does implement a feature, how it implements the feature may be different from how another device omplements it. The only way to be sure is to understand the messages entering a device and observe how the device responds.
